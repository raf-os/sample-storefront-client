/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ItemItemIdRouteImport } from './routes/item/$itemId'
import { Route as AppUserRouteRouteImport } from './routes/app/user/route'
import { Route as AppUserIndexRouteImport } from './routes/app/user/index'
import { Route as AppUserProductsIndexRouteImport } from './routes/app/user/products/index'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemItemIdRoute = ItemItemIdRouteImport.update({
  id: '/item/$itemId',
  path: '/item/$itemId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppUserRouteRoute = AppUserRouteRouteImport.update({
  id: '/app/user',
  path: '/app/user',
  getParentRoute: () => rootRouteImport,
} as any)
const AppUserIndexRoute = AppUserIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppUserRouteRoute,
} as any)
const AppUserProductsIndexRoute = AppUserProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AppUserRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-up': typeof SignUpRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/app/user': typeof AppUserRouteRouteWithChildren
  '/item/$itemId': typeof ItemItemIdRoute
  '/app/user/': typeof AppUserIndexRoute
  '/app/user/products': typeof AppUserProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-up': typeof SignUpRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/item/$itemId': typeof ItemItemIdRoute
  '/app/user': typeof AppUserIndexRoute
  '/app/user/products': typeof AppUserProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sign-up': typeof SignUpRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/app/user': typeof AppUserRouteRouteWithChildren
  '/item/$itemId': typeof ItemItemIdRoute
  '/app/user/': typeof AppUserIndexRoute
  '/app/user/products/': typeof AppUserProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-up'
    | '/unauthorized'
    | '/app/user'
    | '/item/$itemId'
    | '/app/user/'
    | '/app/user/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-up'
    | '/unauthorized'
    | '/item/$itemId'
    | '/app/user'
    | '/app/user/products'
  id:
    | '__root__'
    | '/'
    | '/sign-up'
    | '/unauthorized'
    | '/app/user'
    | '/item/$itemId'
    | '/app/user/'
    | '/app/user/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignUpRoute: typeof SignUpRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  AppUserRouteRoute: typeof AppUserRouteRouteWithChildren
  ItemItemIdRoute: typeof ItemItemIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/item/$itemId': {
      id: '/item/$itemId'
      path: '/item/$itemId'
      fullPath: '/item/$itemId'
      preLoaderRoute: typeof ItemItemIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/user': {
      id: '/app/user'
      path: '/app/user'
      fullPath: '/app/user'
      preLoaderRoute: typeof AppUserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/user/': {
      id: '/app/user/'
      path: '/'
      fullPath: '/app/user/'
      preLoaderRoute: typeof AppUserIndexRouteImport
      parentRoute: typeof AppUserRouteRoute
    }
    '/app/user/products/': {
      id: '/app/user/products/'
      path: '/products'
      fullPath: '/app/user/products'
      preLoaderRoute: typeof AppUserProductsIndexRouteImport
      parentRoute: typeof AppUserRouteRoute
    }
  }
}

interface AppUserRouteRouteChildren {
  AppUserIndexRoute: typeof AppUserIndexRoute
  AppUserProductsIndexRoute: typeof AppUserProductsIndexRoute
}

const AppUserRouteRouteChildren: AppUserRouteRouteChildren = {
  AppUserIndexRoute: AppUserIndexRoute,
  AppUserProductsIndexRoute: AppUserProductsIndexRoute,
}

const AppUserRouteRouteWithChildren = AppUserRouteRoute._addFileChildren(
  AppUserRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignUpRoute: SignUpRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  AppUserRouteRoute: AppUserRouteRouteWithChildren,
  ItemItemIdRoute: ItemItemIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
